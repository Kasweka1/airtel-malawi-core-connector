# CircleCI configuration file
# Mojaloop Org

version: 2.1

# setup: true
orbs:
  build: mojaloop/build@1.0.64

jobs:
  github_release:
    description: "This job creates a GitHub release for the project."
    machine: true
    shell: /bin/bash -eo pipefail
    environment:
      MAIN_BRANCH_NAME: main
    parameters:
      slack:
        type: string
        default: ''
    steps:
      - run:
          name: Install Git
          command: |
            sudo apt-get update && sudo apt-get install -y git
      - checkout
      - run:
          name: Install GitHub CLI
          command: |
            type -p gh >/dev/null || (
              curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg &&
              sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg &&
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" |
              sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null &&
              sudo apt update &&
              sudo apt install gh -y
            )
      - run:
          name: Configure Git
          command: |
            git config --global user.email "ci@example.com"
            git config --global user.name "CircleCI"
      - run:
          name: Fetch release branch
          command: |
            git fetch origin
            git checkout origin/${CIRCLE_BRANCH}
      - run:
          name: Extract version from package (mocked)
          command: |
            echo 'RELEASE_TAG=1.2.3' >> $BASH_ENV
            echo 'RELEASE_CHANGES="Minor bug fixes and improvements."' >> $BASH_ENV
      - run:
          name: Check the release changes
          command: |
            echo "Changes are: ${RELEASE_CHANGES}"
      - run:
          name: Setup Slack config
          command: |
            REPO_NAME=$(basename -s .git "$(git config --get remote.origin.url)")
            echo "export SLACK_PROJECT_NAME=\"${REPO_NAME}\"" >> $BASH_ENV
            echo "export SLACK_RELEASE_TYPE='Github Release'" >> $BASH_ENV
            echo "export SLACK_RELEASE_TAG=\"v${RELEASE_TAG}\"" >> $BASH_ENV
            echo "export SLACK_RELEASE_URL=\"https://github.com/${CIRCLE_PROJECT_USERNAME}/${REPO_NAME}/releases/tag/v${RELEASE_TAG}\"" >> $BASH_ENV
            echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
            echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
      - run:
          name: Debug GitHub release URL
          command: |
            echo "Release URL will be:"
            echo "https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases/tag/v${RELEASE_TAG}"
      - run:
          name: Show BASH_ENV
          command: cat $BASH_ENV
   
      - run:
          name: Create Release
          command: |
            gh release create "v${RELEASE_TAG}" \
              --repo ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} \
              --title "v${RELEASE_TAG} Release" \
              --draft=false \
              --notes "${RELEASE_CHANGES}" \
              ./CHANGELOG.md

  build_local_fixed:
    description: Builds a local Docker image of the project (patched version)
    machine: true
    environment:
      MAIN_BRANCH_NAME: main
    steps:
      - checkout
      - run:
          name: Setup .nvmrc and Node version
          command: |
            if [ -f .nvmrc ]; then
              export NVMRC_VERSION=$(cat .nvmrc)
              echo "export NVMRC_VERSION=$NVMRC_VERSION" >> $BASH_ENV
            else
              echo "No .nvmrc file found"
              exit 1
            fi
      - run:
          name: Build Docker local image (patched)
          command: |
            source $BASH_ENV
            export DOCKER_NODE_VERSION="$NVMRC_VERSION-alpine3.21"

            export SANITIZED_NAME=$(echo "$CIRCLE_PROJECT_REPONAME" \
            | tr '[:upper:]' '[:lower:]' \
            | tr '[:space:]' '-' \
            | tr -cd '[:alnum:]._-' \
            | sed 's/-*$//')


            echo "Building Docker image: ${DOCKER_ORG:-mojaloop}/$SANITIZED_NAME:local with NODE_VERSION=$DOCKER_NODE_VERSION"

            docker build -t ${DOCKER_ORG:-mojaloop}/$SANITIZED_NAME:local --build-arg NODE_VERSION=$DOCKER_NODE_VERSION .
      - run:
          name: Save docker image to workspace
          command: |
            # Sanitize repo name to lowercase, same logic as before
            export SANITIZED_NAME=$(echo "$CIRCLE_PROJECT_REPONAME" \
              | tr '[:upper:]' '[:lower:]' \
              | tr '[:space:]' '-' \
              | tr -cd '[:alnum:]._-' \
              | sed 's/-*$//')

            docker save -o /tmp/docker-image.tar ${DOCKER_ORG:-mojaloop}/$SANITIZED_NAME:local
      - persist_to_workspace:
          root: /tmp
          paths:
            - docker-image.tar


workflows:
  checks:
    jobs:
      - build/pr_title_check:
          name: PR title
          filters:
            branches:
              ignore:
                - main
                - master
  build_and_test:
    jobs:
      - build/setup:
          name: Setup
          filters: &setup-filter
            branches:
              ignore:
                - /feature/*
                - /bugfix/*
            tags:  &setup-tags
              only: /v\d+(\.\d+){2}(-[a-zA-Z-][0-9a-zA-Z-]*\.\d+)?/
          context: org-global

      - build/test_dependencies:
          name: Dependencies
          filters:
            branches:
              ignore:
                - main
                - master
          requires:
            - Setup

      - build/test_deprecations:
          name: Deprecations
          filters: *setup-filter
          requires:
            - Setup

      - build/test_lint: &test-condition
          name: Lint
          filters: *setup-filter
          requires:
            - Setup

      - build/test_unit:
          name: Unit tests
          requires:
            - Setup

      -  build_local_fixed:
          name: Build
          filters:
            branches:
              only:
                - main
          requires:
            - Setup
          context: org-global


      - build/release:
          name: Release
          filters: &release
            branches:
              only:
                - main
                - master
                - /release\/v.*/
          requires:
            - Unit tests
            - Lint
          context: org-global


      - github_release:
          name: GitHub Release
          requires:
            - Release
          filters: *release
          context: org-global
      
